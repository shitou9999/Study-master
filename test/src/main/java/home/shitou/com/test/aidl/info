
Android操作系统为了确保进程之间不会产生相互干扰，就是为了你挂了不会影响我，所以采用了进程隔离的机制，
即为每个进程分配独立虚拟地址空间，进程之间感觉不到彼此的存在，感觉自己仿佛占用整个内存空间。
这样保证了进程的数据安全，但是必然存在另外的问题，那就是进程间通信，进程不可能完全独立运行，
有时候需要相互通信获取别的进程的运行结果等，因此需要想办法解决进程间通信的问题，所以就出现了IPC这个概念.

A应用(应用端--->获取Binder实例)和B应用（服务端,起一个服务返回一个Binder）都遵循相同的协议A

#####创建了aidl以后重新rebuild 项目

客户端通过bindService连接服务端，会调用服务端Service的onBind方法返回一个UserCalcAIDL.Stub的mBinder实例，
然后讲该实例返回给客户端的onServiceConnected()方法里面有两个参数有一个IBinder就是服务端返回的mBinder，
然后客户端通过该实例建立一个新的AIDL.Stub.Proxy对象，我们在客户端调用获取信息方法的时候其实就是调用的
AIDL.Stub.Proxy里面的getUserName()方法，通过mBinder的onTransact()方法写入数据，然后获取数据，就这么个流程了。

